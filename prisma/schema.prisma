generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              BigInt      @id @default(autoincrement())
  name            String      @db.VarChar(255)
  email           String      @unique(map: "users_email_unique") @db.VarChar(255)
  emailVerifiedAt DateTime?   @map("email_verified_at") @db.Timestamp(0)
  password        String      @db.VarChar(255)
  rememberToken   String?     @map("remember_token") @db.VarChar(100)
  createdAt       DateTime?   @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime?   @updatedAt @map("updated_at") @db.Timestamp(0)
  roles           UserRoles[]

  @@map("users")
}

model Role {
  id          BigInt      @id @default(autoincrement())
  name        String      @unique(map: "roles_name_unique") @db.VarChar(255)
  description String?     @db.VarChar(255)
  createdAt   DateTime?   @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime?   @updatedAt @map("updated_at") @db.Timestamp(0)
  users       UserRoles[]

  @@map("roles")
}

model UserRoles {
  roleId    BigInt    @map("role_id")
  userId    BigInt    @map("user_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "role_user_role_id_fkey")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "role_user_user_id_fkey")

  @@unique([userId, roleId], map: "role_user_user_id_role_id_unique")
  @@map("role_user")
}

model Station {
  id                   BigInt                @id @default(autoincrement())
  name                 String                @db.VarChar(200)
  lat                  Float?
  lon                  Float?
  elevation            Float?
  dateInstalled        DateTime?             @map("date_installed") @db.Date
  moStationId          String?               @map("mo_station_id") @db.VarChar(50)
  smsSystemType        String?               @map("sms_system_type") @db.VarChar(50)
  mobileNumber         String?               @unique @map("mobile_number") @db.VarChar(50)
  stationType          String?               @map("station_type") @db.VarChar(50)
  stationType2         String?               @map("station_type2") @db.VarChar(50)
  stationUrl           String?               @map("station_url") @db.VarChar(255)
  status               String?               @db.VarChar(50)
  loggerVersion        String?               @map("logger_version") @db.VarChar(255)
  priorityLevel        String?               @map("priority_level") @db.VarChar(255)
  providerId           String?               @map("provider_id") @db.VarChar(255)
  province             String?               @db.VarChar(255)
  region               String?               @db.VarChar(255)
  address              String?               @db.VarChar
  createdAt            DateTime?             @default(now()) @map("created_at") @db.Timestamptz(0)
  updatedAt            DateTime?             @updatedAt @map("updated_at") @db.Timestamptz(0)
  deletedAt            DateTime?             @map("deleted_at") @db.Timestamp(6)
  hourlyObservations   HourlyObservation[]
  davisObservations    DavisObservation[]
  davisRawObservations DavisObservationRaw[]
  lufftObservations    LufftObservation[]
  lufftRawObservations LufftObservationRaw[]
  health               StationHealth[]

  @@map("observations_station")
}

model DavisObservation {
  id        BigInt    @id @default(autoincrement())
  pres      Float?
  rr        Float?
  rh        Float?
  temp      Float?
  td        Float?
  wdir      Float?
  wspd      Float?
  wspdx     Float?
  srad      Float?
  hi        Float?
  stationId BigInt?   @map("station_id")
  timestamp DateTime? @db.Timestamptz(6)
  wchill    Float?
  rain      Float?
  tx        Float?
  tn        Float?
  wrun      Float?
  thwi      Float?
  thswi     Float?
  senergy   Float?
  sradx     Float?
  uvi       Float?
  uvdose    Float?
  uvx       Float?
  hdd       Float?
  cdd       Float?
  et        Float?
  qcLevel   Int       @default(0) @map("qc_level")
  wdirx     Float?
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  station   Station?  @relation(fields: [stationId], references: [id], onDelete: Cascade, map: "observations_mo_observation_station_id_fkey")

  @@unique([stationId, timestamp])
  @@index([stationId, timestamp(sort: Desc)], map: "observations_mo_observation_idx_station_id_timestamp")
  @@map("observations_mo_observation")
}

model DavisObservationRaw {
  id        BigInt    @id @default(autoincrement())
  pres      Float?
  rr        Float?
  td        Float?
  temp      Float?
  wdir      Float?
  wspd      Float?
  wspdx     Float?
  srad      Float?
  rh        Float?
  timestamp DateTime? @db.Timestamptz(6)
  stationId BigInt?   @map("station_id")
  rain      Float?
  wchill    Float?
  tx        Float?
  tn        Float?
  wrun      Float?
  hi        Float?
  thwi      Float?
  thswi     Float?
  senergy   Float?
  sradx     Float?
  uvi       Float?
  uvdose    Float?
  uvx       Float?
  heatdd    Float?
  cooldd    Float?
  evap      Float?
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  station   Station?  @relation(fields: [stationId], references: [id], onDelete: Cascade, map: "observations_mo_observationraw_station_id_fkey")

  @@unique([stationId, timestamp])
  @@index([stationId, timestamp(sort: Desc)], map: "observations_mo_observationraw_idx_station_id_timestamp")
  @@map("observations_mo_observationraw")
}

model LufftObservation {
  id        BigInt    @id @default(autoincrement())
  pres      Float?
  rr        Float?
  rh        Float?
  temp      Float?
  td        Float?
  wdir      Float?
  wspd      Float?
  wspdx     Float?
  srad      Float?
  mslp      Float?
  hi        Float?
  stationId BigInt?   @map("station_id")
  timestamp DateTime? @db.Timestamptz(6)
  wchill    Float?
  qcLevel   Int       @default(0) @map("qc_level")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  station   Station?  @relation(fields: [stationId], references: [id], onDelete: Cascade, map: "observations_observation_station_id_fkey")

  @@unique([stationId, timestamp])
  @@index([stationId, timestamp(sort: Desc)], map: "observations_observation_idx_station_id_timestamp")
  @@map("observations_observation")
}

model LufftObservationRaw {
  id        BigInt    @id @default(autoincrement())
  pres      Float?
  rr        Float?
  td        Float?
  temp      Float?
  wdir      Float?
  wspd      Float?
  wspdx     Float?
  srad      Float?
  rh        Float?
  timestamp DateTime? @db.Timestamptz(6)
  stationId BigInt?   @map("station_id")
  wchill    Float?
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  station   Station?  @relation(fields: [stationId], references: [id], onDelete: Cascade, map: "observations_observationraw_station_id_fkey")

  @@unique([stationId, timestamp])
  @@index([stationId, timestamp(sort: Desc)], map: "observations_observationraw_idx_station_id_timestamp")
  @@map("observations_observationraw")
}

model StationHealth {
  id                BigInt    @id @default(autoincrement())
  vb1               Float?
  vb2               Float?
  curr              Float?
  bp1               Float?
  bp2               Float?
  cm                String?   @db.VarChar(255)
  ss                Int?
  tempArq           Float?    @map("temp_arq")
  rhArq             Float?    @map("rh_arq")
  fpm               String?   @db.VarChar(255)
  errorMsg          String?   @map("error_msg")
  message           String?
  dataCount         Int?      @map("data_count")
  dataStatus        String?   @map("data_status") @db.VarChar(255)
  timestamp         DateTime? @db.Timestamptz(6)
  stationId         BigInt?   @map("station_id")
  minutesDifference Int?      @map("minutes_difference")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  station           Station?  @relation(fields: [stationId], references: [id], onDelete: Cascade, map: "observations_stationhealth_station_id_fkey")

  @@index([stationId, timestamp(sort: Desc)], map: "observations_stationhealth_idx_station_id_timestamp")
  @@map("observations_stationhealth")
}

model HourlyObservation {
  id        BigInt    @id @default(autoincrement())
  pres      Float?
  rr        Float?
  rh        Float?
  temp      Float?
  td        Float?
  wspd      Float?
  wdir      Float?
  srad      Float?
  hi        Float?
  uvi       Float?
  timestamp DateTime  @db.Timestamptz(0)
  stationId BigInt    @map("station_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(0)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(0)
  station   Station   @relation(fields: [stationId], references: [id], onDelete: Cascade, map: "observations_derivedhourly_station_id_fkey")

  @@unique([stationId, timestamp], map: "observations_derivedhourly_station_id_timestamp_unique")
  @@index([stationId, timestamp(sort: Desc)], map: "observations_derivedhourly_idx_station_id_timestamp")
  @@map("observations_derivedhourly")
}

model SimCard {
  id           BigInt        @id(map: "glabs_pkey") @default(autoincrement())
  mobileNumber String?       @unique(map: "glabs_mobile_number_unique") @map("mobile_number") @db.VarChar(50)
  createdAt    DateTime?     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime?     @updatedAt @map("updated_at") @db.Timestamp(0)
  accessTokens AccessToken[]
  globeTopups  GlabsLoad[]

  @@map("sim_card")
}

model GlabsLoad {
  id            BigInt    @id @default(autoincrement())
  status        String?   @db.VarChar(255)
  promo         String?   @db.VarChar(255)
  transactionId Int?      @map("transaction_id")
  simId         BigInt    @map("sim_id")
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  simCard       SimCard   @relation(fields: [simId], references: [id], onDelete: Cascade, map: "glabs_load_sim_id_fkey")

  @@map("glabs_load")
}

model AccessToken {
  id          BigInt    @id @default(autoincrement())
  accessToken String    @unique(map: "access_tokens_access_token_unique") @map("access_token") @db.VarChar(255)
  type        String    @db.VarChar(50)
  simId       BigInt    @map("sim_id")
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  simCard     SimCard   @relation(fields: [simId], references: [id], onDelete: Cascade, map: "access_tokens_sim_id_fkey")

  @@map("access_tokens")
}

model LaravelFailedJob {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now()) @db.Timestamp(0)

  @@map("failed_jobs")
}

model OauthAccessToken {
  id        String    @id @db.VarChar(100)
  userId    BigInt?   @map("user_id")
  clientId  BigInt    @map("client_id")
  name      String?   @db.VarChar(255)
  scopes    String?
  revoked   Boolean
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  expiresAt DateTime? @map("expires_at") @db.Timestamp(0)

  @@index([userId], map: "oauth_access_tokens_user_id_index")
  @@map("oauth_access_tokens")
}

model OauthAuthCode {
  id        String    @id @db.VarChar(100)
  userId    BigInt    @map("user_id")
  clientId  BigInt    @map("client_id")
  scopes    String?
  revoked   Boolean
  expiresAt DateTime? @map("expires_at") @db.Timestamp(0)

  @@index([userId], map: "oauth_auth_codes_user_id_index")
  @@map("oauth_auth_codes")
}

model OauthClient {
  id                   BigInt    @id @default(autoincrement())
  userId               BigInt?   @map("user_id")
  name                 String    @db.VarChar(255)
  secret               String?   @db.VarChar(100)
  provider             String?   @db.VarChar(255)
  redirect             String
  personalAccessClient Boolean   @map("personal_access_client")
  passwordClient       Boolean   @map("password_client")
  revoked              Boolean
  createdAt            DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt            DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)

  @@index([userId], map: "oauth_clients_user_id_index")
  @@map("oauth_clients")
}

model OauthPersonalAccessClient {
  id        BigInt    @id @default(autoincrement())
  clientId  BigInt    @map("client_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("oauth_personal_access_clients")
}

model OauthRefreshToken {
  id            String    @id @db.VarChar(100)
  accessTokenId String    @map("access_token_id") @db.VarChar(100)
  revoked       Boolean
  expiresAt     DateTime? @map("expires_at") @db.Timestamp(0)

  @@index([accessTokenId], map: "oauth_refresh_tokens_access_token_id_index")
  @@map("oauth_refresh_tokens")
}

model PersonalAccessTokens {
  id            BigInt    @id @default(autoincrement())
  tokenableType String    @map("tokenable_type") @db.VarChar(255)
  tokenableId   BigInt    @map("tokenable_id")
  name          String    @db.VarChar(255)
  token         String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities     String?
  lastUsedAt    DateTime? @map("last_used_at") @db.Timestamp(0)
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)

  @@index([tokenableType, tokenableId], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
  @@map("personal_access_tokens")
}

model LaravelMigrations {
  id        Int    @id @default(autoincrement())
  migration String @db.VarChar(255)
  batch     Int

  @@map("migrations")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model PasswordReset {
  email     String    @db.VarChar(255)
  token     String    @db.VarChar(255)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@map("password_resets")
  @@ignore
}
