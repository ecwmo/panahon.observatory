
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Report {
  id          Int                        @id @default(autoincrement())
  name        String
  title       String
  number      Int
  show        Boolean                    @default(true)
  createdAt   DateTime                   @default(now()) @map("created_at")
  updatedAt   DateTime                   @updatedAt @map("updated_at")
  files       ReportItem[]
  staticFiles ReportToReportStaticItem[]

  @@unique([name, number])
  @@map("reports")
}

model ReportItem {
  id        Int      @id @default(autoincrement())
  fileName  String   @map("file_name")
  reportId  Int      @map("report_id")
  show      Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  report    Report   @relation(fields: [reportId], references: [id])

  @@map("report_items")
}

model ReportStaticItem {
  id        Int                        @id @default(autoincrement())
  fileName  String                     @map("file_name")
  createdAt DateTime                   @default(now()) @map("created_at")
  updatedAt DateTime                   @updatedAt @map("updated_at")
  reports   ReportToReportStaticItem[]

  @@map("report_static_items")
}

model ReportToReportStaticItem {
  reportId           Int              @map("report_id")
  reportStaticItemId Int              @map("report_static_item_id")
  createdAt          DateTime         @default(now()) @map("created_at")
  show               Boolean          @default(true)
  order              Int              @default(0)
  updatedAt          DateTime         @updatedAt @map("updated_at")
  report             Report           @relation(fields: [reportId], references: [id])
  reportStaticItem   ReportStaticItem @relation(fields: [reportStaticItemId], references: [id])

  @@id([reportId, reportStaticItemId])
  @@map("reports_to_report_static_items")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
